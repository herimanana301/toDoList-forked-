{"ast":null,"code":"var _jsxFileName = \"/Users/landy/Desktop/selfProject/toDoList_project/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport ToDoForm from \"./components/ToDoForm\";\nimport ToDoList from \"./components/ToDoList\";\nimport ToDoCalendar from \"./components/ToDoCalendar\";\nimport TaskCategory from \"./components/TaskCategory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null); // For calendar filtering\n  const [selectedCategory, setSelectedCategory] = useState(\"\"); // For category filtering\n\n  // Fetch tasks from Flask API on load\n  useEffect(() => {\n    fetch(\"/tasks\").then(res => res.json()).then(data => {\n      setTasks(data);\n      setFilteredTasks(data); // Initialize filtered tasks to show all initially\n    });\n  }, []);\n\n  // Add task via API\n  const addTask = async task => {\n    const response = await fetch(\"/api/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    });\n    const newTask = await response.json();\n    setTasks(prevTasks => [...prevTasks, newTask]);\n  };\n\n  // Delete task via API\n  const deleteTask = async taskId => {\n    await fetch(`/tasks/${taskId}`, {\n      method: \"DELETE\"\n    });\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n  };\n\n  // Mark task as complete via API\n  const completeTask = async taskId => {\n    await fetch(`/tasks/${taskId}/complete`, {\n      method: \"PUT\"\n    });\n    setTasks(prevTasks => prevTasks.map(task => task.id === taskId ? {\n      ...task,\n      completed: true\n    } : task));\n  };\n\n  // Function to filter tasks by date and category\n  const filterTasks = () => {\n    let filtered = tasks;\n\n    // Filter by date if a date is selected\n    if (selectedDate) {\n      filtered = filtered.filter(task => {\n        const taskDate = new Date(task.deadline);\n        return taskDate.toDateString() === selectedDate.toDateString();\n      });\n    }\n\n    // Filter by category if a category is selected\n    if (selectedCategory) {\n      filtered = filtered.filter(task => task.category === selectedCategory);\n    }\n    setFilteredTasks(filtered); // Update the filtered task list\n  };\n\n  // UseEffect to filter tasks when either date or category changes\n  useEffect(() => {\n    filterTasks();\n  }, [selectedDate, selectedCategory, tasks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ToDo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToDoForm, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToDoCalendar, {\n      onDateChange: setSelectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskCategory, {\n      category: selectedCategory,\n      onCategoryChange: setSelectedCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToDoList, {\n      tasks: filteredTasks,\n      deleteTask: deleteTask,\n      completeTask: completeTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HY9doEHfMuKDKLFXao+/491LbXU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","ToDoForm","ToDoList","ToDoCalendar","TaskCategory","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","filteredTasks","setFilteredTasks","selectedDate","setSelectedDate","selectedCategory","setSelectedCategory","fetch","then","res","json","data","addTask","task","response","method","headers","body","JSON","stringify","newTask","prevTasks","deleteTask","taskId","filter","id","completeTask","map","completed","filterTasks","filtered","taskDate","Date","deadline","toDateString","category","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDateChange","onCategoryChange","_c","$RefreshReg$"],"sources":["/Users/landy/Desktop/selfProject/toDoList_project/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport ToDoForm from \"./components/ToDoForm\";\nimport ToDoList from \"./components/ToDoList\";\nimport ToDoCalendar from \"./components/ToDoCalendar\";\nimport TaskCategory from \"./components/TaskCategory\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null); // For calendar filtering\n  const [selectedCategory, setSelectedCategory] = useState(\"\"); // For category filtering\n\n  // Fetch tasks from Flask API on load\n  useEffect(() => {\n    fetch(\"/tasks\")\n      .then((res) => res.json())\n      .then((data) => {\n        setTasks(data);\n        setFilteredTasks(data); // Initialize filtered tasks to show all initially\n      });\n  }, []);\n\n  // Add task via API\n  const addTask = async (task) => {\n    const response = await fetch(\"/api/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(task),\n    });\n    const newTask = await response.json();\n    setTasks((prevTasks) => [...prevTasks, newTask]);\n  };\n\n  // Delete task via API\n  const deleteTask = async (taskId) => {\n    await fetch(`/tasks/${taskId}`, {\n      method: \"DELETE\",\n    });\n    setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\n  };\n\n  // Mark task as complete via API\n  const completeTask = async (taskId) => {\n    await fetch(`/tasks/${taskId}/complete`, {\n      method: \"PUT\",\n    });\n    setTasks((prevTasks) =>\n      prevTasks.map((task) =>\n        task.id === taskId ? { ...task, completed: true } : task\n      )\n    );\n  };\n\n  // Function to filter tasks by date and category\n  const filterTasks = () => {\n    let filtered = tasks;\n\n    // Filter by date if a date is selected\n    if (selectedDate) {\n      filtered = filtered.filter((task) => {\n        const taskDate = new Date(task.deadline);\n        return taskDate.toDateString() === selectedDate.toDateString();\n      });\n    }\n\n    // Filter by category if a category is selected\n    if (selectedCategory) {\n      filtered = filtered.filter((task) => task.category === selectedCategory);\n    }\n\n    setFilteredTasks(filtered); // Update the filtered task list\n  };\n\n  // UseEffect to filter tasks when either date or category changes\n  useEffect(() => {\n    filterTasks();\n  }, [selectedDate, selectedCategory, tasks]);\n\n  return (\n    <div className=\"App\">\n      <h1>ToDo List</h1>\n      {/* Task Form */}\n      <ToDoForm addTask={addTask} />\n\n      {/* Calendar for filtering tasks by deadline */}\n      <ToDoCalendar onDateChange={setSelectedDate} />\n\n      {/* Category dropdown for filtering tasks by category */}\n      <TaskCategory category={selectedCategory} onCategoryChange={setSelectedCategory} />\n\n      {/* Display the filtered tasks */}\n      <ToDoList tasks={filteredTasks} deleteTask={deleteTask} completeTask={completeTask} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}